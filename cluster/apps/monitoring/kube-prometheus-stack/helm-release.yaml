---
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: kube-prometheus-stack
  namespace: monitoring
spec:
  interval: 5m
  install:
    remediation:
      retries: 3
  upgrade:
    remediation:
      retries: 3
  chart:
    spec:
      # renovate: registryUrl=https://prometheus-community.github.io/helm-charts
      chart: kube-prometheus-stack
      version: 18.0.3
      sourceRef:
        kind: HelmRepository
        name: prometheus-community-charts
        namespace: flux-system
      interval: 5m
  timeout: 20m
  values:
    server:
      resources:
        requests:
          memory: 1500Mi
          cpu: 25m
        limits:
          memory: 2000Mi
    prometheusOperator:
      createCustomResource: true
      configReloaderCpu: 200m
    alertmanager:
      config:
        global:
          slack_api_url: "${SECRET_ALERT_MANAGER_WEBHOOK}"
          resolve_timeout: 5m
        receivers:
          - name: 'null'
          - name: 'slack-notifications'
            slack_configs:
              - channel: '#notifications'
                icon_url: 'https://avatars3.githubusercontent.com/u/3380462'
                username: 'Alertmanager'
                send_resolved: true
                title: |-
                  [{{ .Status | toUpper }}{{ if eq .Status "firing" }}:{{ .Alerts.Firing | len }}{{ end }}] {{ if ne .CommonAnnotations.summary ""}}{{ .CommonAnnotations.summary }} {{ else if ne .CommonAnnotations.message ""}}{{ .CommonAnnotations.message }} {{ else if ne .CommonAnnotations.description ""}}{{ .CommonAnnotations.description }} {{ else }}{{ .CommonLabels.alertname }}{{ end }}
                text: >-
                  {{ range .Alerts -}}
                    *Alert:* {{ .Annotations.title }}{{ if .Labels.severity }} - `{{ .Labels.severity }}`{{ end }}

                  {{ if ne .Annotations.summary ""}}*Summary:* {{ .Annotations.summary }} {{ else if ne .Annotations.message ""}}*Message:* {{ .Annotations.message }} {{ else if ne .Annotations.description ""}}*Description:* {{ .Annotations.description }}{{ end }}

                  *Details:*
                    {{ range .Labels.SortedPairs }} â€¢ *{{ .Name }}:* `{{ .Value }}`
                    {{ end }}
                  {{ end }}
        route:
          receiver: "slack-notifications"
          routes:
            - match:
                alertname: Watchdog
              receiver: "null"
            - receiver: "slack-notifications"
              match:
                severity: critical
              continue: true
            - receiver: "slack-notifications"
        inhibit_rules:
          - source_match:
              severity: "critical"
            target_match:
              severity: "warning"
            # Apply inhibition if the alertname is the same.
            equal: ["alertname", "namespace"]
        templates: ["*.tmpl"]
      alertmanagerSpec:
        storage:
          volumeClaimTemplate:
            spec:
              storageClassName: nfs-client
              resources:
                requests:
                  storage: 10Gi
      ingress:
        enabled: true
        pathType: Prefix
        annotations:
          kubernetes.io/ingress.class: "nginx"
          cert-manager.io/cluster-issuer: letsencrypt-production
        hosts:
          - "prom-alert.${SECRET_DOMAIN}"
        tls:
          - hosts:
              - "prom-alert.${SECRET_DOMAIN}"
            secretName: prom-alert-tls
    nodeExporter:
      serviceMonitor:
        relabelings:
          - action: replace
            regex: (.*)
            replacement: $1
            sourceLabels:
              - __meta_kubernetes_pod_node_name
            targetLabel: kubernetes_node
    kube-state-metrics:
      fullnameOverride: kube-state-metrics
    prometheus-node-exporter:
      fullnameOverride: node-exporter
    grafana:
      enabled: false
      forceDeployDashboards: true
      sidecar:
        dashboards:
          multicluster:
            etcd:
              enabled: true
    kubelet:
      enabled: true
      serviceMonitor:
        metricRelabelings:
          - action: replace
            sourceLabels:
              - node
            targetLabel: instance
    kubeApiServer:
      enabled: true
    kubeControllerManager:
      enabled: true
      endpoints:
        - 10.10.10.96
        - 10.10.10.138
        - 10.10.10.139
        - 10.10.10.136
    kubeScheduler:
      enabled: true
      endpoints:
        - 10.10.10.96
        - 10.10.10.138
        - 10.10.10.139
        - 10.10.10.136
    kubeProxy:
      enabled: true
      endpoints:
        - 10.10.10.96
        - 10.10.10.138
        - 10.10.10.139
        - 10.10.10.136
    kubeEtcd:
      enabled: true
      endpoints:
        - 10.10.10.96
        - 10.10.10.138
        - 10.10.10.139
        - 10.10.10.136
      service:
        enabled: true
        port: 2381
        targetPort: 2381
    prometheus:
      thanosService:
        enabled: true
      ingress:
        enabled: true
        pathType: Prefix
        annotations:
          kubernetes.io/ingress.class: "nginx"
          cert-manager.io/cluster-issuer: letsencrypt-production
        hosts:
          - "prom-server.${SECRET_DOMAIN}"
        tls:
          - hosts:
              - "prom-server.${SECRET_DOMAIN}"
            secretName: prom-server-tls
      prometheusSpec:
        replicas: 1
        replicaExternalLabelName: "replica"
        ruleSelectorNilUsesHelmValues: false
        serviceMonitorSelectorNilUsesHelmValues: false
        podMonitorSelectorNilUsesHelmValues: false
        probeSelectorNilUsesHelmValues: false
        retention: 6h
        enableAdminAPI: true
        walCompression: true
        storageSpec:
          volumeClaimTemplate:
            spec:
              storageClassName: nfs-client
              resources:
                requests:
                  storage: 10Gi
        thanos:
          image: quay.io/thanos/thanos:v0.22.0
          version: v0.9.0
          objectStorageConfig:
            name: thanos-objstore
            key: objstore.yml
